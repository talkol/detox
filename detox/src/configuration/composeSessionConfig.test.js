const DetoxConfigErrorBuilder = require('../errors/DetoxConfigErrorBuilder');

describe('composeSessionConfig', () => {
  let composeSessionConfig;
  let cliConfig, detoxConfig, deviceConfig;
  /** @type {DetoxConfigErrorBuilder} */
  let errorBuilder;

  beforeEach(() => {
    composeSessionConfig = require('./composeSessionConfig');
    errorBuilder = new DetoxConfigErrorBuilder();
    cliConfig = {};
    detoxConfig = {};
    deviceConfig = {};
  });

  const compose = () => composeSessionConfig({
    cliConfig,
    detoxConfig,
    deviceConfig,
    errorBuilder,
  });

  it('should generate a default config', async () => {
    expect(await compose()).toEqual({
      autoStart: true,
      debugSynchronization: false,
      server: expect.any(String),
      sessionId: expect.any(String),
    });
  });

  describe('sessionId', function() {
    describe('by default', () => {
      it('should be autogenerated GUID', async () => {
        expect(await compose()).toMatchObject({
          sessionId: expect.stringMatching(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/i),
        });
      });
    });

    it('should pass validations', async () => {
      detoxConfig.session = { sessionId: 1234 };
      await expect(compose()).rejects.toThrowError(errorBuilder.invalidSessionIdProperty());

      detoxConfig.session = { sessionId: '' };
      await expect(compose()).rejects.toThrowError(errorBuilder.invalidSessionIdProperty());
    });

    describe('when defined in global config', () => {
      beforeEach(() => {
        detoxConfig.session = { sessionId: 'someSessionId' };
      });

      it('should use the specified value', async () => {
        expect((await compose()).sessionId).toBe('someSessionId');
      });

      describe('and in device config', () => {
        beforeEach(() => {
          deviceConfig.session = { sessionId: 'otherSessionId' };
        });

        it('should use the specified value', async () => {
          expect((await compose()).sessionId).toBe('otherSessionId');
        });
      });
    });
  });

  describe('server', function() {
    describe('by default', () => {
      it('should be autogenerated', async () => {
        expect(await compose()).toMatchObject({
          server: expect.stringMatching(/^ws:.*localhost:/),
        });
      });
    });

    it('should pass validations', async () => {
      detoxConfig.session = { server: 1234 };
      await expect(compose()).rejects.toThrowError(errorBuilder.invalidServerProperty());

      detoxConfig.session = { server: 'http://invalid-protocol.com' };
      await expect(compose()).rejects.toThrowError(errorBuilder.invalidServerProperty());
    });

    describe('when defined in global config', () => {
      beforeEach(() => {
        detoxConfig.session = { server: 'ws://myserver:1100' };
      });

      it('should use the specified value', async () => {
        expect(await compose()).toMatchObject({
          server: 'ws://myserver:1100',
        });
      });

      describe('and in device config', () => {
        beforeEach(() => {
          deviceConfig.session = { server: 'ws://otherserver:1100' };
        });

        it('should use the specified value', async () => {
          expect(await compose()).toMatchObject({
            server: 'ws://otherserver:1100',
          });
        });
      });
    });
  });

  describe('autoStart', function() {
    describe('by default', () => {
      it('should be true', async () => {
        expect(await compose()).toMatchObject({ autoStart: true });
      });
    });

    describe('when autoStart is explicitly false', function() {
      beforeEach(() => {
        detoxConfig.session = { autoStart: false };
      });

      it('should override the value', async () => {
        expect(await compose()).toMatchObject({ autoStart: false });
      });
    });

    describe('when server is defined', () => {
      beforeEach(() => {
        detoxConfig.session = { server: 'ws://localhost:1100' };
      });

      it('should be false', async () => {
        expect(await compose()).toMatchObject({ autoStart: false });
      });

      describe('when autoStart is explicitly true', function() {
        beforeEach(() => {
          detoxConfig.session.autoStart = true;
        });

        it('should override the value', async () => {
          expect(await compose()).toMatchObject({ autoStart: true });
        });
      });
    });
  });

  describe('debugSynchronization', function () {
    describe('by default', () => {
      it('should be false', async () => {
        expect(await compose()).toMatchObject({
          debugSynchronization: false,
        });
      });
    });

    it('should pass validations', async () => {
      detoxConfig.session = { debugSynchronization: -1 };
      await expect(compose()).rejects.toThrowError(errorBuilder.invalidDebugSynchronizationProperty());

      detoxConfig.session = { debugSynchronization: '3000' };
      await expect(compose()).rejects.toThrowError(errorBuilder.invalidDebugSynchronizationProperty());
    });

    describe('when defined in global config', () => {
      beforeEach(() => {
        detoxConfig.session = { debugSynchronization: 10000 };
      });

      it('should use that value', async () => {
        expect(await compose()).toMatchObject({
          debugSynchronization: 10000,
        });
      });

      describe('and in device config', () => {
        beforeEach(() => {
          deviceConfig.session = { debugSynchronization: 20000 };
        });

        it('should use that value', async () => {
          expect(await compose()).toMatchObject({
            debugSynchronization: 20000,
          });
        });

        describe('and in CLI config', () => {
          beforeEach(() => {
            cliConfig.debugSynchronization = 3000;
          });

          it('should use that value', async () => {
            expect(await compose()).toMatchObject({
              debugSynchronization: 3000,
            });
          });
        });
      });
    });
  });
});

